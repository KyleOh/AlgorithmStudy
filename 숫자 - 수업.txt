# 숫자

# 나머지 연산
-> 정답을 1000000007 / 9
-> 100,000으로 나눈 나머지를 출력하라는 문제가 나옴.
-> 문제의 정답이 너무 큰 경우. C++, JAVA, Python제외하고 
int, longlong으로 저장하는데 2^31-1 2^63-1 (10^18)
10^50 이면 long long으로는 정답을 구할 수가 없다. 따라서 long long을 넘어가는 경우에는 따로 처리를 해야하니까,

(A+B) % C = (A%C + B%C) % C
곱셈과 뺄셈도 마찬가지인데, 뺄셈은 더하기 M을 한 번더 해줘야 함.


* 최대 공약수
-> 뭔가 정답이 분수 형태로 나왔을 때, 정답을 기약분수의 형태로 출력해야 할 때.
GCD
약수 : N을 나눌 수 있는 수

2부터 둘 중에 작은 수까지의 모든 정수로 나누어 보는 방법
O(N)이 시간 복잡도에 해당함.

유클리드 호제법을 이용하면 빠르다
GCD(a,b) = GCD(b, a%b)

r == 0 이면 b가 최대 공약수이다.


def gcd(a,b):
    if b == 0:
        return A
    return gcd(b, a%b) -> O(lgN)



* 최소 공배수
곱한 다음에 나누면 됨.
l = g*(a/g)*(b/g)

def lcm(a,b):
    g = gcd(a,b)
    return g*(a/g)*(b/g)


소수 : 
1) 어떤 수 N이 소수인지 아닌지 판별하는 방법
-> 단순히는 1, 2,3, .... N까지 일일이 소수인지 확인해봄.
2) N보다 작거나 같은 모든 자연수 중에서 소수를 찾아내는 방법

N/2보다 작거나 같은 자연수로 나누어 떨어지면 안된다.